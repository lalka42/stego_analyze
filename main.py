# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QFont
from variable import variable
import time
from parse_and_prepare import parser, dataset_prepare
import threading

from learn_and_calc import calc, learn
import os

from scapy.arch.windows import get_windows_if_list
import pandas as pd


def msg_error(title, mes):
    msg = QMessageBox()
    msg.setWindowTitle(title)
    msg.setText(mes)
    msg.setIcon(QMessageBox.Icon.Critical)
    msg.setStandardButtons(QMessageBox.Ok)
    msg.exec_()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1200, 620)
        MainWindow.setMinimumSize(QtCore.QSize(1200, 620))
        MainWindow.setMaximumSize(QtCore.QSize(1200, 620))
        MainWindow.setAutoFillBackground(True)
        MainWindow.setStyleSheet('background-image: url("home_background.png")')
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setAutoFillBackground(True)
        self.centralwidget.setStyleSheet('background-image: url("home_background.png")')
        self.centralwidget.setObjectName("centralwidget")
        self.rb1 = QtWidgets.QRadioButton(self.centralwidget)
        self.rb1.setGeometry(QtCore.QRect(95, 150, 70, 20))
        self.rb1.setObjectName("rb1")
        self.rb1.setStyleSheet("background:transparent;")
        self.rb2 = QtWidgets.QRadioButton(self.centralwidget)
        self.rb2.setGeometry(QtCore.QRect(300, 150, 151, 20))
        self.rb2.setObjectName("rb2")
        self.rb2.setStyleSheet("background:transparent;")
        self.rb3 = QtWidgets.QRadioButton(self.centralwidget)
        self.rb3.setGeometry(QtCore.QRect(570, 150, 95, 20))
        self.rb3.setObjectName("rb3")
        self.rb3.setStyleSheet("background:transparent;")
        self.rb4 = QtWidgets.QRadioButton(self.centralwidget)
        self.rb4.setGeometry(QtCore.QRect(880, 150, 201, 20))
        self.rb4.setObjectName("rb4")
        self.rb4.setStyleSheet("background:transparent;")

        self.button_group = QtWidgets.QButtonGroup()
        self.button_group.addButton(self.rb1, 1)
        self.button_group.addButton(self.rb2, 2)
        self.button_group.addButton(self.rb3, 3)
        self.button_group.addButton(self.rb4, 4)
        self.button_group.idClicked.connect(self.pr_mode)

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(375, 80, 500, 20))
        self.label.setObjectName("label")
        self.label.setFont(QFont('Arial', 14, QtGui.QFont.Bold))
        self.label.setStyleSheet("background:transparent;")

        #self.label_2 = QtWidgets.QLabel(self.centralwidget)
       ## self.label_2.setObjectName("label")
       # self.label_2.setFont(QFont('Arial', 14, QtGui.QFont.Bold))
       # self.label.setStyleSheet("background:transparent;")

        self.separator_1 = QtWidgets.QFrame(self.centralwidget)
        self.separator_1.setGeometry(QtCore.QRect(240, 130, 5, 411))
        self.separator_1.setFrameShape(QtWidgets.QFrame.VLine)
        self.separator_1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.separator_1.setObjectName("separator_1")
        self.separator_2 = QtWidgets.QFrame(self.centralwidget)
        self.separator_2.setGeometry(QtCore.QRect(480, 130, 5, 411))
        self.separator_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.separator_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.separator_2.setObjectName("separator_2")
        self.separator_3 = QtWidgets.QFrame(self.centralwidget)
        self.separator_3.setGeometry(QtCore.QRect(730, 130, 5, 411))
        self.separator_3.setFrameShape(QtWidgets.QFrame.VLine)
        self.separator_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.separator_3.setObjectName("separator_3")
        self.dump_choice_button = QtWidgets.QPushButton(self.centralwidget)
        self.dump_choice_button.setGeometry(QtCore.QRect(80, 250, 93, 28))
        self.dump_choice_button.setObjectName("dump_choice_button")
        self.dump_choice_button.setStyleSheet("background: #415374;")
        self.dump_choice_line = QtWidgets.QLineEdit(self.centralwidget)
        self.dump_choice_line.setGeometry(QtCore.QRect(33, 200, 190, 22))
        self.dump_choice_line.setObjectName("dump_choice_line")
        self.need_mean = QtWidgets.QCheckBox(self.centralwidget)
        self.need_mean.setGeometry(QtCore.QRect(20, 310, 211, 20))
        self.need_mean.setObjectName("need_mean")
        self.need_mean.setStyleSheet("background:transparent;")
        self.need_saved = QtWidgets.QCheckBox(self.centralwidget)
        self.need_saved.setGeometry(QtCore.QRect(20, 350, 201, 20))
        self.need_saved.setObjectName("need_saved")
        self.need_saved.setStyleSheet("background:transparent;")
        self.dir_choice_line = QtWidgets.QLineEdit(self.centralwidget)
        self.dir_choice_line.setGeometry(QtCore.QRect(33, 420, 190, 22))
        self.dir_choice_line.setObjectName("dir_choice_line")
        self.dir_choice_button = QtWidgets.QPushButton(self.centralwidget)
        self.dir_choice_button.setGeometry(QtCore.QRect(60, 480, 121, 28))
        self.dir_choice_button.setObjectName("dir_choice_button")
        self.dir_choice_button.setStyleSheet("background: #415374;")
        self.dataset_dump_choice_line = QtWidgets.QLineEdit(self.centralwidget)
        self.dataset_dump_choice_line.setGeometry(QtCore.QRect(275, 200, 190, 22))
        self.dataset_dump_choice_line.setObjectName("dataset_dump_choice_line")
        self.dataset_dump_choice_button = QtWidgets.QPushButton(self.centralwidget)
        self.dataset_dump_choice_button.setGeometry(QtCore.QRect(325, 250, 93, 28))
        self.dataset_dump_choice_button.setObjectName("dataset_dump_choice_button")
        self.dataset_dump_choice_button.setStyleSheet("background: #415374;")
        self.dataset_dir_choice_button = QtWidgets.QPushButton(self.centralwidget)
        self.dataset_dir_choice_button.setGeometry(QtCore.QRect(300, 480, 131, 28))
        self.dataset_dir_choice_button.setObjectName("dataset_dir_choice_button")
        self.dataset_dir_choice_button.setStyleSheet("background: #415374;")
        self.dataset_dir_choice_line = QtWidgets.QLineEdit(self.centralwidget)
        self.dataset_dir_choice_line.setGeometry(QtCore.QRect(275, 420, 190, 22))
        self.dataset_dir_choice_line.setObjectName("dataset_dir_choice_line")
        self.dataset_choice_line = QtWidgets.QLineEdit(self.centralwidget)
        self.dataset_choice_line.setGeometry(QtCore.QRect(518, 200, 190, 22))
        self.dataset_choice_line.setObjectName("dataset_choice_line")
        self.dataset_choice_button = QtWidgets.QPushButton(self.centralwidget)
        self.dataset_choice_button.setGeometry(QtCore.QRect(555, 250, 121, 28))
        self.dataset_choice_button.setObjectName("dataset_choice_button")
        self.dataset_choice_button.setStyleSheet("background: #415374;")
        self.svm_variable = QtWidgets.QLineEdit(self.centralwidget)
        self.svm_variable.setGeometry(QtCore.QRect(518, 360, 190, 22))
        self.svm_variable.setObjectName("svm_variable")
        self.knn_variable = QtWidgets.QLineEdit(self.centralwidget)
        self.knn_variable.setGeometry(QtCore.QRect(518, 410, 190, 22))
        self.knn_variable.setObjectName("knn_variable")
        self.boost_variable = QtWidgets.QLineEdit(self.centralwidget)
        self.boost_variable.setGeometry(QtCore.QRect(518, 460, 190, 22))
        self.boost_variable.setObjectName("boost_variable")
        self.default_learn = QtWidgets.QCheckBox(self.centralwidget)
        self.default_learn.setGeometry(QtCore.QRect(500, 290, 231, 41))
        self.default_learn.setObjectName("default_learn")
        self.default_learn.setStyleSheet("background:transparent;")
        self.rts_results = QtWidgets.QTableWidget(self.centralwidget)
        self.rts_results.setStyleSheet("background: white")
        self.rts_results.setGeometry(QtCore.QRect(780, 240, 392, 300))
        self.rts_results.setObjectName("rts_results")
        self.rts_analyze = QtWidgets.QPushButton(self.centralwidget)
        self.rts_analyze.setGeometry(QtCore.QRect(770, 570, 131, 28))
        self.rts_analyze.setObjectName("rts_analyze")
        self.rts_analyze.setStyleSheet("background: #1a6dc8; color: white;")
        self.rts_stop = QtWidgets.QPushButton(self.centralwidget)
        self.rts_stop.setGeometry(QtCore.QRect(1030, 570, 131, 28))
        self.rts_stop.setObjectName("rts_stop")
        self.rts_stop.setStyleSheet("background: #1a6dc8; color: white;")
        self.iface_choice = QtWidgets.QComboBox(self.centralwidget)
        self.iface_choice.setGeometry(QtCore.QRect(780, 200, 392, 28))
        self.spravka = QtWidgets.QPushButton(self.centralwidget)
        self.spravka.setGeometry(QtCore.QRect(555, 500, 121, 28))
        self.spravka.setObjectName("spravka")
        self.spravka.setStyleSheet("background: #415374;")
        self.pusk = QtWidgets.QPushButton(self.centralwidget)
        self.pusk.setGeometry(QtCore.QRect(300, 550, 131, 35))
        self.pusk.setObjectName("pusk")
        self.pusk.setStyleSheet("background: #1a6dc8; color: white;")
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.working()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Стегоанализ"))
        self.rb1.setText(_translate("MainWindow", "Анализ"))
        self.rb2.setText(_translate("MainWindow", "Подготовка датасета"))
        self.rb3.setText(_translate("MainWindow", "Обучение"))
        self.rb4.setText(_translate("MainWindow", "Анализ в реальном времени"))
        self.label.setText(_translate("MainWindow", "Пожалуйста, выберите режим работы программы"))
        self.dump_choice_button.setText(_translate("MainWindow", "Выбор дампа"))
        self.need_mean.setText(_translate("MainWindow", "Нужно ли вывести график?"))
        self.need_saved.setText(_translate("MainWindow", "Нужно ли сохранить график?"))
        self.dir_choice_button.setText(_translate("MainWindow", "Выбор директории"))
        self.dataset_dump_choice_button.setText(_translate("MainWindow", "Выбор дампа"))
        self.dataset_dir_choice_button.setText(_translate("MainWindow", "Выбор директории"))
        self.dataset_choice_button.setText(_translate("MainWindow", "Выбор датасета"))
        self.default_learn.setText(_translate("MainWindow", "Настройки обучения по умолчанию"))
        self.rts_analyze.setText(_translate("MainWindow", "Запустить анализ"))
        self.rts_stop.setText(_translate("MainWindow", "Остановить анализ"))
        self.spravka.setText(_translate("MainWindow", "Справка"))
        self.pusk.setText(_translate("MainWindow", "ПУСК"))

    def working(self):
        self.pusk.clicked.connect(analyze)
        self.dump_choice_button.clicked.connect(self.dumped)
        self.dir_choice_button.clicked.connect(self.saved)
        self.dataset_dump_choice_button.clicked.connect(self.dataset_dumped)
        self.dataset_dir_choice_button.clicked.connect(self.dataset_saved)
        self.dataset_choice_button.clicked.connect(self.dataset)
        self.rts_analyze.clicked.connect(start_rts_in_bg)
        self.rts_stop.clicked.connect(self.stop_rts)
        self.need_mean.stateChanged.connect(self.plot_state)
        self.need_saved.stateChanged.connect(self.plot_state)
        self.dump_choice_line.textChanged[str].connect(variable.change_path)
        self.dir_choice_line.textChanged[str].connect(variable.change_save_path)
        self.dataset_choice_line.textChanged[str].connect(variable.change_dataset_path)
        self.dataset_dump_choice_line.textChanged[str].connect(variable.change_prepare_set_path)
        self.dataset_dir_choice_line.textChanged[str].connect(variable.change_save_prepare_path)
        self.iface_choice.activated[str].connect(self.iface_choiced)

    def plot_state(self):
        variable.change_mean_diag(self.need_mean.isChecked())
        variable.change_save_diag(self.need_saved.isChecked())

    def block_ui(self):
        self.pusk.setEnabled(False)

        self.sec_learning(False)
        self.sec_prepare(False)
        self.sec_analyze(False)
        self.sec_rts(False)
        self.rts_stop.setEnabled(False)

    def sec_analyze(self, mode):
        self.pusk.setEnabled(mode)
        self.dump_choice_button.setEnabled(mode)
        self.dir_choice_button.setEnabled(mode)
        self.dump_choice_line.setEnabled(mode)
        self.dir_choice_line.setEnabled(mode)
        self.need_mean.setEnabled(mode)
        self.need_saved.setEnabled(mode)

    def sec_prepare(self, mode):
        self.pusk.setEnabled(mode)
        self.dataset_dump_choice_button.setEnabled(mode)
        self.dataset_dir_choice_button.setEnabled(mode)
        self.dataset_dump_choice_line.setEnabled(mode)
        self.dataset_dir_choice_line.setEnabled(mode)

    def sec_learning(self, mode):
        self.pusk.setEnabled(mode)
        self.dataset_choice_button.setEnabled(mode)
        self.dataset_choice_line.setEnabled(mode)
        self.default_learn.setEnabled(mode)
        self.spravka.setEnabled(mode)
        self.svm_variable.setEnabled(mode)
        self.knn_variable.setEnabled(mode)
        self.boost_variable.setEnabled(mode)

    def sec_rts(self, mode):
        self.iface_choice.setEnabled(mode)
        self.rts_analyze.setEnabled(mode)
        self.rts_results.setEnabled(mode)


    def rb_state(self, mode):
        self.rb1.setEnabled(mode)
        self.rb2.setEnabled(mode)
        self.rb3.setEnabled(mode)
        self.rb4.setEnabled(mode)

    def pr_mode(self, mode):
        variable.change_program_mode(mode)
        if mode == 1:
            self.sec_learning(False)
            self.sec_prepare(False)
            self.sec_analyze(True)
            self.sec_rts(False)
            self.rts_iface()

        elif mode == 2:
            self.sec_learning(False)
            self.sec_analyze(False)
            self.sec_rts(False)
            self.sec_prepare(True)
            self.rts_iface()
        elif mode == 3:
            self.sec_prepare(False)
            self.sec_analyze(False)
            self.sec_learning(True)
            self.sec_rts(False)
            self.rts_iface()
        elif mode == 4:
            self.sec_learning(False)
            self.sec_prepare(False)
            self.sec_analyze(False)
            self.sec_rts(True)
            self.rts_iface()

    def dumped(self):
        filename = str(QtWidgets.QFileDialog.getOpenFileNames(None, "Select Files", "", "Dumps (*.pcap *.pcapng)"))
        filename = filename[:-30]
        filename = filename[3:]
        filename = os.path.normpath(filename)
        self.dump_choice_line.setText(str(filename))
        variable.change_path(filename)

    def saved(self):
        save_dir_path = str(QtWidgets.QFileDialog.getExistingDirectory(None, "Select Directory"))
        save_dir_path = os.path.normpath(save_dir_path)
        self.dir_choice_line.setText(str(save_dir_path))
        variable.change_save_path(save_dir_path)

    def dataset_dumped(self):
        filename = str(QtWidgets.QFileDialog.getOpenFileNames(None, "Select Files", "", "Dumps (*.pcap *.pcapng)"))
        filename = filename[:-30]
        filename = filename[3:]
        filename = os.path.normpath(filename)
        self.dataset_dump_choice_line.setText(str(filename))
        variable.change_prepare_set_path(filename)

    def dataset_saved(self):
        save = str(QtWidgets.QFileDialog.getExistingDirectory(None, "Select Directory"))
        save = os.path.normpath(save)
        self.dataset_dir_choice_line.setText(str(save))
        variable.change_save_prepare_path(save)

    def dataset(self):
        filename = str(QtWidgets.QFileDialog.getOpenFileNames(None, "Select Files", "", "Excel (*.xlsx)"))
        filename = filename[:-21]
        filename = filename[3:]
        filename = os.path.normpath(filename)
        self.dataset_choice_line.setText(str(filename))
        variable.change_dataset_path(filename)

    def msg_res(self, title, mes):
        msg = QMessageBox()
        msg.setWindowTitle(title)
        msg.setText(mes)
        msg.setIcon(QMessageBox.Icon.Information)
        msg.setStandardButtons(QMessageBox.Ok)
        msg.exec_()


    def rts_iface(self):
        interfaces = pd.DataFrame(get_windows_if_list())
        filtr = interfaces['ipv4_metric'] != 0
        interfaces = pd.DataFrame(interfaces[filtr])
        df = interfaces[['name']]
        iface_list = df['name'].tolist()
        self.iface_choice.addItems(iface_list)

    def iface_choiced(self, text):
        variable.change_iface(text)

    def rts_out(self, real_row):
        headers = ['ip.src', 'ip.dst', 'SVM', 'k-NN', 'Boost']
        self.rts_results.setColumnCount(len(headers))
        self.rts_results.setHorizontalHeaderLabels(headers)
        self.rts_results.verticalHeader().setVisible(False)
        #self.rts_results.resizeColumnsToContents()
        self.rts_results.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.rts_results.horizontalHeader().setSectionResizeMode(0, QHeaderView.Interactive)
        row = self.rts_results.rowCount()
        self.rts_results.setRowCount(row + 1)
        col = 0
        for item in variable.rts_row:
            cell = QTableWidgetItem(str(item))
            self.rts_results.setItem(row, col, cell)
            col += 1
        self.rts_results.scrollToBottom()




    def stop_rts(self):
        variable.rts_analyze_stop()
        self.rb_state(True)
        self.rts_analyze.setEnabled(True)
        self.rts_stop.setEnabled(False)

dump_file = os.getcwd() + '\\dump.csv'
stop_rts = False


# Функция завершения работы программы
def quit_program():
    variable.quit = 1
    dump_file = os.getcwd() + '\\dump.csv'
    prepareset_path = os.getcwd() + '\\prepareset.csv'
    if os.path.exists(dump_file):
        os.remove(dump_file)
    if os.path.exists(prepareset_path):
        os.remove(prepareset_path)


# Кнопка ПУСК
def analyze():
    title = "Ошибка"
    ui.block_ui()
    ui.rb_state(False)

    if variable.mode == 1:

        if variable.path is None or os.path.exists(variable.path) is False:
            ui.sec_analyze(True)
            ui.rb_state(True)
            msg_error(title, "Не выбран или отсутствует дамп для анализа")
            return None
        elif variable.path_of_save is None or os.path.exists(variable.path_of_save) is False:
            ui.sec_analyze(True)
            ui.rb_state(True)
            msg_error(title, "Не выбрана или отсутствует директория для сохранения результатов")
            return None
        elif not (os.path.isfile('svm_model.joblib' or 'knn_model.joblib' or 'boost_model.joblib')):
            ui.sec_analyze(True)
            ui.rb_state(True)
            msg_error(title, "Одна или более из моделей не обучена")

            return None
        else:
            mode = 1
            time_start = time.perf_counter()
            parser(variable.path, dump_file, mode)
            calc(dump_file, mode)
            time_elapsed = "{:2.2f}".format(time.perf_counter() - time_start)
            msg = "Анализ завершён.\n\nЗатраченное время: " + str(time_elapsed) + ' секунд(ы)' + '\n'
            ui.msg_res("Результаты анализа", msg)
            ui.sec_analyze(True)
            ui.rb_state(True)
    elif variable.mode == 3:
        if variable.dataset_path is None or os.path.exists(variable.dataset_path) is False:
            msg_error(title, "Не выбран\отсутствует датасет для обучения")
            ui.sec_learning(True)
            ui.rb_state(True)
            return None
        else:
            time_start = time.perf_counter()
            # Это остатки от крутилок коэффициентов тестовой выборки из Tkinter
            # variable.change_svm_count(spin_svm.get())
            # variable.change_knn_count(spin_knn.get())
            # variable.change_boost_count(spin_boost.get())
            learn(variable.dataset_path)
            if not variable.check_learn:
                ui.sec_learning(True)
                ui.rb_state(True)
                msg_error(title, "Датасет неправильно размечен")
                return None

            time_elapsed = "{:2.2f}".format(time.perf_counter() - time_start)
            msg1 = 'SVC Score: ' + '\n' + str(variable.report1) + '\n' + '\n'
            msg2 = 'k-NN Score: ' + '\n' + str(variable.report2) + '\n' + '\n'
            msg3 = 'Boost Score: ' + '\n' + str(variable.report3) + '\n' + '\n'
            msg4 = 'Затраченное время: ' + str(time_elapsed) + ' секунд(ы)' + '\n' + '\n'
            msg = msg1 + msg2 + msg3 + msg4
            ui.msg_res("Результаты обучения", msg)
            ui.sec_learning(True)
            ui.rb_state(True)
    elif variable.mode == 2:
        if os.path.exists(variable.prepare_set_path) is False or os.path.exists(variable.prepare_set_save_path) is False or variable.prepare_set_path is None or variable.prepare_set_save_path  is None:
            msg_error(title, "Не выбран\отсутствует дамп для подготовки датасета или директория для сохранения")
            ui.sec_prepare(True)
            ui.rb_state(True)
            return None
        else:
            time_start = time.perf_counter()
            dataset_prepare()
            ui.sec_prepare(True)
            ui.rb_state(True)
            time_elapsed = "{:2.2f}".format(time.perf_counter() - time_start)
            msg = "Формирование датасета завершено.\n\nЗатраченное время: " + str(time_elapsed) + ' секунд(ы)' + '\n'
            ui.msg_res("Формирование датасета", msg)
            return None


def start_analyze_in_bg():
    threading.Thread(target=analyze).start()

def start_rts_in_bg():
    threading.Thread(target=rts_analyze_func).start()
    ui.rb_state(False)
    ui.rts_analyze.setEnabled(False)
    ui.rts_stop.setEnabled(True)

def rts_analyze_func():
    mode = 2
    variable.rts_analyze_restore()
    path = ''
    while not variable.stop_rts:
        parser(mode, dump_file, path)
        calc(dump_file, mode)
        time.sleep(0.7)
        ui.rts_out(variable.rts_row)
    return None


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.block_ui()
    MainWindow.show()
    sys.exit(app.exec_())
    prepareset_path = os.getcwd() + '\\prepareset.csv'
    if os.path.exists(dump_file):
        os.remove(dump_file)
    if os.path.exists(prepareset_path):
        os.remove(prepareset_path)
